<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Akka on Oleg Baydakov</title>
    <link>https://obaydakov.github.io/categories/akka/</link>
    <description>Recent content in Akka on Oleg Baydakov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://obaydakov.github.io/categories/akka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Dockerise a Scala and Akka HTTP Application - the easy way</title>
      <link>https://obaydakov.github.io/post/2018/how-to-dockerise-a-scala-and-akka-http-application-the-easy-way/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/how-to-dockerise-a-scala-and-akka-http-application-the-easy-way/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Running akka-cluster on Kubernetes</title>
      <link>https://obaydakov.github.io/post/2018/running-akka-cluster-on-kubernetes/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/running-akka-cluster-on-kubernetes/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka Actors evolution. Towards type-safe distributed computations</title>
      <link>https://obaydakov.github.io/post/2018/akka-actors-evolution-towards-type-safe-distributed-computations/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-actors-evolution-towards-type-safe-distributed-computations/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Scalaz 8 IO vs Akka (typed) actors vs Monix</title>
      <link>https://obaydakov.github.io/post/2018/scalaz-8-io-vs-akka-typed-actors-vs-monix/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/scalaz-8-io-vs-akka-typed-actors-vs-monix/</guid>
      <description>Part 2
Part 3</description>
    </item>
    
    <item>
      <title>Actor per Request With Akka Http</title>
      <link>https://obaydakov.github.io/post/2018/actor-per-request-with-akka-http/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/actor-per-request-with-akka-http/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka stream interface for gRPC</title>
      <link>https://obaydakov.github.io/post/2018/akka-stream-interface-for-grpc/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-stream-interface-for-grpc/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Scalaz 8 IO vs Akka (typed) actors vs Monix</title>
      <link>https://obaydakov.github.io/post/2018/scalaz-8-io-vs-akka-typed-actors-vs-monix/</link>
      <pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/scalaz-8-io-vs-akka-typed-actors-vs-monix/</guid>
      <description>Part 2
Part 3</description>
    </item>
    
    <item>
      <title>Kafka based Microservices with Akka Streams and Kafka Streams </title>
      <link>https://obaydakov.github.io/post/2018/kafka-based-microservices-with-akka-streams-and-kafka-streams/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/kafka-based-microservices-with-akka-streams-and-kafka-streams/</guid>
      <description>YouTube</description>
    </item>
    
    <item>
      <title>Functional Programming with Kafka Streams and Scala</title>
      <link>https://obaydakov.github.io/post/2018/functional-programming-with-kafka-streams-and-scala/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/functional-programming-with-kafka-streams-and-scala/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Streaming data from PostgreSQL using Akka Streams, Akka Http and Doobie</title>
      <link>https://obaydakov.github.io/post/2018/streaming-data-from-postgresql-using-akka-streams-akka-http-and-doobie/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/streaming-data-from-postgresql-using-akka-streams-akka-http-and-doobie/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka Streams для простых смертных</title>
      <link>https://obaydakov.github.io/post/2018/akka-streams-%D0%B4%D0%BB%D1%8F-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D1%85-%D1%81%D0%BC%D0%B5%D1%80%D1%82%D0%BD%D1%8B%D1%85/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-streams-%D0%B4%D0%BB%D1%8F-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D1%85-%D1%81%D0%BC%D0%B5%D1%80%D1%82%D0%BD%D1%8B%D1%85/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Patterns for Streaming Telemetry with Akka Streams</title>
      <link>https://obaydakov.github.io/post/2018/patterns-for-streaming-telemetry-with-akka-streams/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/patterns-for-streaming-telemetry-with-akka-streams/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka streams examples</title>
      <link>https://obaydakov.github.io/post/2018/akka-streams-examples/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-streams-examples/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Kafka Streams, Akka, Kubernetes experiments</title>
      <link>https://obaydakov.github.io/post/2018/kafka-streams-akka-kubernetes-experiments/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/kafka-streams-akka-kubernetes-experiments/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Running akka-cluster on Kubernetes</title>
      <link>https://obaydakov.github.io/post/2018/running-akka-cluster-on-kubernetes/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/running-akka-cluster-on-kubernetes/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Windowing data in Akka Streams</title>
      <link>https://obaydakov.github.io/post/2018/windowing-data-in-akka-streams/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/windowing-data-in-akka-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Windowing data in Big Data Streams - Spark, Flink, Kafka, Akka</title>
      <link>https://obaydakov.github.io/post/2018/windowing-data-in-big-data-streams-spark-flink-kafka-akka/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/windowing-data-in-big-data-streams-spark-flink-kafka-akka/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Akka Stream Kafka, complete stream when reached end of log</title>
      <link>https://obaydakov.github.io/post/2018/akka-stream-kafka-complete-stream-when-reached-end-of-log/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-stream-kafka-complete-stream-when-reached-end-of-log/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka Streams Cookbook</title>
      <link>https://obaydakov.github.io/post/2018/akka-streams-cookbook/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-streams-cookbook/</guid>
      <description>This is a collection of patterns to demonstrate various usage of the Akka Streams API by solving small targeted problems in the format of “recipes”. The purpose of this page is to give inspiration and ideas how to approach various small tasks involving streams. The recipes in this page can be used directly as-is, but they are most powerful as starting points: customization of the code snippets is warmly encouraged.</description>
    </item>
    
    <item>
      <title>Akka Streams From Zero to Kafka</title>
      <link>https://obaydakov.github.io/post/2018/akka-streams-from-zero-to-kafka/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-streams-from-zero-to-kafka/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Functional Programming with Kafka Streams and Scala</title>
      <link>https://obaydakov.github.io/post/2018/functional-programming-with-kafka-streams-and-scala/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/functional-programming-with-kafka-streams-and-scala/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Kafka Streams DSL vs Processor API</title>
      <link>https://obaydakov.github.io/post/2018/kafka-streams-dsl-vs-processor-api/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/kafka-streams-dsl-vs-processor-api/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Simply explained: Akka Streams Backpressure</title>
      <link>https://obaydakov.github.io/post/2018/simply-explained-akka-streams-backpressure/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/simply-explained-akka-streams-backpressure/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Diagram- and graph-generating library for Akka Streams</title>
      <link>https://obaydakov.github.io/post/2018/diagram-and-graph-generating-library-for-akka-streams/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/diagram-and-graph-generating-library-for-akka-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A library for reading data from Akka Actors using Spark Streaming.</title>
      <link>https://obaydakov.github.io/post/2018/a-library-for-reading-data-from-akka-actors-using-spark-streaming/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/a-library-for-reading-data-from-akka-actors-using-spark-streaming/</guid>
      <description>Link
Apache Bahir Extensions for Apache Spark Downloads</description>
    </item>
    
    <item>
      <title>Akka Streams Flight Delay</title>
      <link>https://obaydakov.github.io/post/2018/akkastream-flight-delay/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akkastream-flight-delay/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka Streams Kafka</title>
      <link>https://obaydakov.github.io/post/2018/akka-streams-kafka/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-streams-kafka/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Communicating with kafka using akka actors</title>
      <link>https://obaydakov.github.io/post/2018/communicating-with-kafka-using-akka-actors/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/communicating-with-kafka-using-akka-actors/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>How to connect Akka Stream and Spark Streaming by turning creating a Flow element that feeds into an InputDstream</title>
      <link>https://obaydakov.github.io/post/2018/how-to-connect-akka-stream-and-spark-streaming/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/how-to-connect-akka-stream-and-spark-streaming/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Lightbend tutorial on writing microservices with Akka Streams, Kafka Streams, and Kafka</title>
      <link>https://obaydakov.github.io/post/2018/lightbend-tutorial-on-writing-microservices-with-akka-streams-kafka-streams-and-kafka/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/lightbend-tutorial-on-writing-microservices-with-akka-streams-kafka-streams-and-kafka/</guid>
      <description>Link
Video
An umbrella project for multiple implementations of model serving
Serving Machine Learning Models Book
Operationalizing Machine Learning - Serving ML Models Video</description>
    </item>
    
    <item>
      <title>Various akka streams docs, tutorials and blogs</title>
      <link>https://obaydakov.github.io/post/2018/various-akka-streams-docs-tutorials-and-blogs/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/various-akka-streams-docs-tutorials-and-blogs/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Diagram- and graph-generating library for Akka Streams</title>
      <link>https://obaydakov.github.io/post/2018/diagram-and-graph-generating-library-for-akka-streams/</link>
      <pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/diagram-and-graph-generating-library-for-akka-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS, SQS, Alpakka, Akka Streams – go reactive – Part 1</title>
      <link>https://obaydakov.github.io/post/2018/aws-sqs-alpakka-akka-streams-go-reactive-part-1/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/aws-sqs-alpakka-akka-streams-go-reactive-part-1/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Akka remoting minimal example</title>
      <link>https://obaydakov.github.io/post/2018/akka-remoting-minimal-example/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/akka-remoting-minimal-example/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Tour of Akka Cluster – Eventual consistency, persistent actors, message delivery semantics</title>
      <link>https://obaydakov.github.io/post/2018/tour-of-akka-cluster-eventual-consistency-persistent-actors-message-delivery-semantics/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2018/tour-of-akka-cluster-eventual-consistency-persistent-actors-message-delivery-semantics/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Examples of Sources, Flow&#39;s and Sink&#39;s for Akka Streams</title>
      <link>https://obaydakov.github.io/post/2017/examples-of-sources-flow-s-and-sink-s-for-akka-streams/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/examples-of-sources-flow-s-and-sink-s-for-akka-streams/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Emoji trends on Twitter using Akka Streams</title>
      <link>https://obaydakov.github.io/post/2017/emoji-trends-on-twitter-using-akka-streams/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/emoji-trends-on-twitter-using-akka-streams/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Ray Tracing with Akka</title>
      <link>https://obaydakov.github.io/post/2017/ray-tracing-with-akka/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/ray-tracing-with-akka/</guid>
      <description>Part 1
Part 2
Part 3
Part 4</description>
    </item>
    
    <item>
      <title>8 Akka Anti Patterns you&#39;d better be aware of</title>
      <link>https://obaydakov.github.io/post/2017/8-akka-anti-patterns-you-d-better-be-aware-of/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/8-akka-anti-patterns-you-d-better-be-aware-of/</guid>
      <description>Manuel Bernhardt blog</description>
    </item>
    
    <item>
      <title>Integrating Akka Streams and Akka Actors</title>
      <link>https://obaydakov.github.io/post/2017/integrating-akka-streams-and-akka-actors/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/integrating-akka-streams-and-akka-actors/</guid>
      <description>In the first article of this series, I demonstrated the most basic patterns for integrating Akka Actors and the Akka Streams API. In the second article, I began developing an example to show how actors compliment streams, providing fault-tolerance and life-cycle management. In the third article, I extended this example to demonstrate how actors can be used to distribute streaming workloads in an Akka cluster, as well as provide location transparency for streams.</description>
    </item>
    
    <item>
      <title>Islands in the Stream Integrating Akka Streams and Akka Actors</title>
      <link>https://obaydakov.github.io/post/2017/islands-in-the-stream-integrating-akka-streams-and-akka-actors/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/islands-in-the-stream-integrating-akka-streams-and-akka-actors/</guid>
      <description>[]
[]
[]</description>
    </item>
    
    <item>
      <title>Stream Driven Development design your data pipeline with Akka Streams</title>
      <link>https://obaydakov.github.io/post/2017/stream-driven-development-design-your-data-pipeline-with-akka-streams/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/stream-driven-development-design-your-data-pipeline-with-akka-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrating Akka Streams and Akka Actors</title>
      <link>https://obaydakov.github.io/post/2017/integrating-akka-streams-and-akka-actors/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/integrating-akka-streams-and-akka-actors/</guid>
      <description>In part one of this series, I described the challenges of integrating the Akka Streams API with Akka Actors. I demonstrated the basic patterns for interfacing streams and actors, removing the discontinuity between the two. In this article, I will begin to explore more sophisticated ways to integrate actors and streams, in support of building robust and scalable distributed systems, rather than just simple applications, or stand-alone data-processing pipelines. This article will focus on how Akka Actors compliment the Akka Streams API with regard life-cycle management and fault tolerance.</description>
    </item>
    
    <item>
      <title>Patterns for Streaming Measurement Data with Akka Streams</title>
      <link>https://obaydakov.github.io/post/2017/patterns-for-streaming-measurement-data-with-akka-streams/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/patterns-for-streaming-measurement-data-with-akka-streams/</guid>
      <description>Patterns for Streaming Measurement Data with Akka Streams</description>
    </item>
    
    <item>
      <title>Reactive Stream vs Akka Stream</title>
      <link>https://obaydakov.github.io/post/2017/reactive-stream-vs-akka-stream/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/reactive-stream-vs-akka-stream/</guid>
      <description>Akka Stream Concepts: Source ~&amp;gt; Flow ~&amp;gt; Sink (code example) Akka Stream is built with the decision to offer APIs that are minimal and consistent-as opposed to easy or intuitive. There is no magic, all the API features are explicit. You have operators to define Source, Sink, Flow, Graph and Operators. You have the operators to handle back-pressure, buffering, transformations, failure recovery, etc. But on my opinion the features that make Akka Stream implementation interesting are: 1.</description>
    </item>
    
    <item>
      <title>Docker &#43;Akka HTTP</title>
      <link>https://obaydakov.github.io/post/2017/docker-akka-http/</link>
      <pubDate>Sat, 06 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/docker-akka-http/</guid>
      <description>INTRODUCTION
A while ago I worked on a project that used this tech stack
Akka HTTP : (actually we used Spray.IO but it is practically the same thing for the purpose of this article). For those that don&amp;rsquo;t know what Akka HTTP is, it is a simple Akka based framework that is also able to expose a REST interface to communicate with the actor system Cassandra database : Apache Cassandra is a free and open-source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure.</description>
    </item>
    
    <item>
      <title>Implementing a custom Akka Streams graph stage </title>
      <link>https://obaydakov.github.io/post/2017/implementing-a-custom-akka-streams-graph-stage/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/implementing-a-custom-akka-streams-graph-stage/</guid>
      <description>THE USE CASE Let&amp;rsquo;s say that having a stream of elements of type E you want to observe their arbitrary property of type P, accumulate the elements as long as the property remains unchanged and only emit an immutable.Seq[E] of accumulated elements when the property changes. In a real-life example the elements can be e.g. lines in a CSV file which you would like to group by a given field.</description>
    </item>
    
    <item>
      <title>Text Mining With Akka Streams</title>
      <link>https://obaydakov.github.io/post/2017/text-mining-with-akka-streams/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/text-mining-with-akka-streams/</guid>
      <description>Extracting n-grams from text
In text mining, n-grams are useful data in the area of NLP (natural language processing). In this blog post, I&amp;rsquo;ll illustrate extracting n-grams from a stream of text messages using Akka Streams with Scala as the programming language.
First thing first, let&amp;rsquo;s create an object with methods for generating random text content
Akka Streams Text Mining</description>
    </item>
    
    <item>
      <title>Message Delivery Reliability</title>
      <link>https://obaydakov.github.io/post/2017/message-delivery-reliability/</link>
      <pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/message-delivery-reliability/</guid>
      <description>Akka helps you build reliable applications which make use of multiple processor cores in one machine (&amp;ldquo;scaling up&amp;rdquo;) or distributed across a computer network (&amp;ldquo;scaling out&amp;rdquo;). The key abstraction to make this work is that all interactions between your code units-actors-happen via message passing, which is why the precise semantics of how messages are passed between actors deserve their own chapter.
In order to give some context to the discussion below, consider an application which spans multiple network hosts.</description>
    </item>
    
  </channel>
</rss>