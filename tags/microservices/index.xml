<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservices on Oleg Baydakov</title>
    <link>https://obaydakov.github.io/tags/microservices/</link>
    <description>Recent content in Microservices on Oleg Baydakov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://obaydakov.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emoji trends on Twitter using Akka Streams</title>
      <link>https://obaydakov.github.io/post/emoji-trends-on-twitter-using-akka-streams/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/emoji-trends-on-twitter-using-akka-streams/</guid>
      <description>Link</description>
    </item>
    
    <item>
      <title>Kafka Streams API</title>
      <link>https://obaydakov.github.io/post/2017/kafka-streams-api/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/kafka-streams-api/</guid>
      <description>The easiest way to write mission-critical real-time applications and microservices
Kafka Streams is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka&amp;rsquo;s server-side cluster technology.
Link</description>
    </item>
    
    <item>
      <title>Ray Tracing with Akka</title>
      <link>https://obaydakov.github.io/post/ray-tracing-with-akka/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/ray-tracing-with-akka/</guid>
      <description>Part 1
Part 2
Part 3
Part 4</description>
    </item>
    
    <item>
      <title>8 Akka Anti Patterns you&#39;d better be aware of</title>
      <link>https://obaydakov.github.io/post/2017/8-akka-anti-patterns-you-d-better-be-aware-of/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/8-akka-anti-patterns-you-d-better-be-aware-of/</guid>
      <description>Manuel Bernhardt blog</description>
    </item>
    
    <item>
      <title>Fast Data with Apache Flink at ING lessons learned from designing and building a large streaming </title>
      <link>https://obaydakov.github.io/post/2017/fast-data-with-apache-flink-at-ing-lessons-learned-from-designing-and-building-a-large-streaming/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/fast-data-with-apache-flink-at-ing-lessons-learned-from-designing-and-building-a-large-streaming/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrating Akka Streams and Akka Actors</title>
      <link>https://obaydakov.github.io/post/2017/integrating-akka-streams-and-akka-actors/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/integrating-akka-streams-and-akka-actors/</guid>
      <description>In the first article of this series, I demonstrated the most basic patterns for integrating Akka Actors and the Akka Streams API. In the second article, I began developing an example to show how actors compliment streams, providing fault-tolerance and life-cycle management. In the third article, I extended this example to demonstrate how actors can be used to distribute streaming workloads in an Akka cluster, as well as provide location transparency for streams.</description>
    </item>
    
    <item>
      <title>Islands in the Stream Integrating Akka Streams and Akka Actors</title>
      <link>https://obaydakov.github.io/post/2017/islands-in-the-stream-integrating-akka-streams-and-akka-actors/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/islands-in-the-stream-integrating-akka-streams-and-akka-actors/</guid>
      <description>[]
[]
[]</description>
    </item>
    
    <item>
      <title>Stream Driven Development design your data pipeline with Akka Streams</title>
      <link>https://obaydakov.github.io/post/2017/stream-driven-development-design-your-data-pipeline-with-akka-streams/</link>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/stream-driven-development-design-your-data-pipeline-with-akka-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designing a Microservices Architecture for Failure</title>
      <link>https://obaydakov.github.io/post/2017/designing-a-microservices-architecture-for-failure/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/designing-a-microservices-architecture-for-failure/</guid>
      <description>A Microservices architecture makes it possible to isolate failures through well-defined service boundaries. But like in every distributed system, there is a higher chance for network, hardware or application level issues. As a consequence of service dependencies, any component can be temporarily unavailable for their consumers. To minimize the impact of partial outages we need to build fault tolerant services that can gracefully respond to certain types of outages.
Link</description>
    </item>
    
    <item>
      <title>Microservice in real-tim using Golf</title>
      <link>https://obaydakov.github.io/post/2017/microservice-in-real-tim-using-golf/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/microservice-in-real-tim-using-golf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Microservices are hard — an invaluable guide to microservices</title>
      <link>https://obaydakov.github.io/post/2017/microservices-are-hard-an-invaluable-guide-to-microservices/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/microservices-are-hard-an-invaluable-guide-to-microservices/</guid>
      <description>Go + Microservices = Go kit
Microservices are hard — an invaluable guide to microservices
Watch the talks from the 2017 Microservices Practitioner Virtual Summit
Microservices are hard — an invaluable guide to microservices.
Containers Docker
Orchestration Kubernetes
Management Forge
Api Gateway / Canary Ambassador
Edge Proxy Envoy
Monitoring Prometheus
Local Testing Telepresence</description>
    </item>
    
    <item>
      <title>0 to Microservice in 5 minutes with Go and Minke</title>
      <link>https://obaydakov.github.io/post/2017/0-to-microservice-in-5-minutes-with-go-and-minke/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/0-to-microservice-in-5-minutes-with-go-and-minke/</guid>
      <description>0 to Microservice in 5 minutes with Go and Minke</description>
    </item>
    
    <item>
      <title>Web app using Microservices in Go</title>
      <link>https://obaydakov.github.io/post/2017/web-app-using-microservices-in-go/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://obaydakov.github.io/post/2017/web-app-using-microservices-in-go/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>